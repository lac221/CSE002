/////////////////
//CSE 2 - Lydia Cornwell
//Yahtzee.java - scores a game of yahtzee using randomly rolled dice, or a set of dice generated by the user

import java.util.Scanner;
public class Yahtzee {
  public static void main(String[] args) {

    //asks user if they would like to randomly roll or select the numbers for their dice
    Scanner myScanner = new Scanner(System.in);
    System.out.print("Enter 1 to select numbers. Enter 2 to randomly roll: ");
    double answerRoll = myScanner.nextDouble();

    // --------------------------------------------------------
    //declares dice variables
    int diceOne = 0;
    int diceTwo = 0;
    int diceThree = 0;
    int diceFour = 0;
    int diceFive = 0;
    
    int runProgram = 0;
    
    //if user does not enter a 1 or 2 to select how they want to pick their dice, display error
    if (answerRoll != 1 && answerRoll != 2) {
      System.out.println("Error: you did not enter a valid number");
    }
    
    //initialize dice if use selects to enter numbers
    if (answerRoll == 1) {

      System.out.print("enter 5 numbers: ");
      int fiveDigits = myScanner.nextInt();
      
      int length = String.valueOf(fiveDigits).length(); //checks the length of fiveDigits
      if (length > 5){
        System.out.println("Error: you entered an invalid number");
        runProgram = 1; //does not allow program to run if user enters more than 5 numbers
      }
      
      diceOne = fiveDigits % 10;
      diceTwo = fiveDigits/10 % 10;
      diceThree = fiveDigits/100 % 10;
      diceFour = fiveDigits/1000 % 10;
      diceFive = fiveDigits/10000 % 10;
      
      if(diceOne > 6 || diceOne < 1 ||
        diceTwo > 6 || diceTwo < 1 || 
        diceThree > 6 || diceThree < 1 || 
        diceFour > 6 || diceFour < 1 || 
        diceFive > 6 || diceFive < 1){
        System.out.println("Error: you entered an invalid number");
        runProgram = 1;
      }
      
    }
  
    //----------------------------------------------------------  
    //initialize dice if user selects random
    if (answerRoll == 2) {
  
      diceOne = (int)(Math.random() * (6)) + 1;
      diceTwo = (int)(Math.random() * (6)) + 1;
      diceThree = (int)(Math.random() * (6)) + 1;
      diceFour = (int)(Math.random() * (6)) + 1;
      diceFive = (int)(Math.random() * (6)) + 1;
    }
    //-------------------------------------------------------- 
    if(runProgram != 1){ //run program only if the numbers of the dice are between 1 and 6
      
    
    //sorting dice
    int numberOfOnes = 0;
    int numberOfTwos = 0;
    int numberOfThrees = 0;
    int numberOfFours = 0;
    int numberOfFives = 0;
    int numberOfSixes = 0;
      
    //goes through dice and counts up the number of each value
    switch (diceOne) {
      case (1):
      numberOfOnes = numberOfOnes + 1;
      break;
      case(2):
      numberOfTwos = numberOfTwos + 1;
      break;
      case(3):
      numberOfThrees = numberOfThrees + 1;
      break;
      case(4):
      numberOfFours = numberOfFours + 1;
      break;
      case(5):
      numberOfFives = numberOfFives + 1;
      break;
      case(6):
      numberOfSixes = numberOfSixes + 1;
      break;
    }

    switch (diceTwo) {
      case (1):
      numberOfOnes = numberOfOnes + 1;
      break;
      case(2):
      numberOfTwos = numberOfTwos + 1;
      break;
      case(3):
      numberOfThrees = numberOfThrees + 1;
      break;
      case(4):
      numberOfFours = numberOfFours + 1;
      break;
      case(5):
      numberOfFives = numberOfFives + 1;
      break;
      case(6):
      numberOfSixes = numberOfSixes + 1;
      break;
    }

    switch (diceThree) {
      case (1):
      numberOfOnes = numberOfOnes + 1;
      break;
      case(2):
      numberOfTwos = numberOfTwos + 1;
      break;
      case(3):
      numberOfThrees = numberOfThrees + 1;
      break;
      case(4):
      numberOfFours = numberOfFours + 1;
      break;
      case(5):
      numberOfFives = numberOfFives + 1;
      break;
      case(6):
      numberOfSixes = numberOfSixes + 1;
      break;
    }
    switch (diceFour) {
      case (1):
      numberOfOnes = numberOfOnes + 1;
      break;
      case(2):
      numberOfTwos = numberOfTwos + 1;
      break;
      case(3):
      numberOfThrees = numberOfThrees + 1;
      break;
      case(4):
      numberOfFours = numberOfFours + 1;
      break;
      case(5):
      numberOfFives = numberOfFives + 1;
      break;
      case(6):
      numberOfSixes = numberOfSixes + 1;
      break;
    }
    switch (diceFive) {
      case (1):
      numberOfOnes = numberOfOnes + 1;
      break;
      case(2):
      numberOfTwos = numberOfTwos + 1;
      break;
      case(3):
      numberOfThrees = numberOfThrees + 1;
      break;
      case(4):
      numberOfFours = numberOfFours + 1;
      break;
      case(5):
      numberOfFives = numberOfFives + 1;
      break;
      case(6):
      numberOfSixes = numberOfSixes + 1;
      break;
    }


    //upper section calculations
    int acesScore = numberOfOnes;
    int twosScore = numberOfTwos * 2;
    int threesScore = numberOfThrees * 3;
    int foursScore = numberOfFours * 4;
    int fivesScore = numberOfFives * 5;
    int sixesScore = numberOfSixes * 6;

    int upperInitialTotal = acesScore + twosScore + threesScore + foursScore + fivesScore + sixesScore;
    int upperInitialWithBonus = upperInitialTotal;
    if (upperInitialTotal >= 63) {
      upperInitialWithBonus += 35;
    }

    //lower section calculations
    int threeOfAKinds = 0;
    int fourOfAKinds = 0;
    int yahtzee = 0;
    int fullHouse = 0;
    int smStraight = 0;
    int lgStraight = 0;
    int chance = 0; 
    
    //goes through the amount of each number to find if the amounts match any of the lower section requirements
    switch (numberOfOnes) {
      case(3):
      threeOfAKinds += 1 * 3;
      if (numberOfTwos == 2 || numberOfThrees == 2 || numberOfFours == 2 || numberOfFives == 2 || numberOfSixes== 2) {
        fullHouse += 1;
      }
      break;
      case(4):
      fourOfAKinds += 1 * 4;
      break;
      case(5):
      yahtzee += 1;
      break;
    }

    switch (numberOfTwos) {
      case(3):
      threeOfAKinds += 2 * 3;
      if (numberOfOnes == 2 || numberOfThrees == 2 || numberOfFours == 2 || numberOfFives == 2 || numberOfSixes== 2) {
        fullHouse += 1;
      }
      break;
      case(4):
      fourOfAKinds += 2 * 4;
      break;
      case(5):
      yahtzee += 1;
      break;
    }

    switch (numberOfThrees) {
      case(3):
      threeOfAKinds += 3 * 3;
      if (numberOfOnes == 2 || numberOfTwos == 2 || numberOfFours == 2 || numberOfFives == 2 || numberOfSixes== 2) {
        fullHouse += 1;
      }
      break;
      case(4):
      fourOfAKinds += 3 * 4;
      break;
      case(5):
      yahtzee += 1;
      break;
    }

    switch (numberOfFours) {
      case(3):
      threeOfAKinds += 4 * 3;
      if (numberOfOnes == 2 || numberOfTwos == 2 || numberOfThrees == 2 || numberOfFives == 2 || numberOfSixes== 2) {
        fullHouse += 1;
      }
      break;
      case(4):
      fourOfAKinds += 4 * 4;
      break;
      case(5):
      yahtzee += 1;
      break;
    }

    switch (numberOfFives) {
      case(3):
      threeOfAKinds += 5 * 3;
      if (numberOfOnes == 2 || numberOfTwos == 2 || numberOfThrees == 2 || numberOfFours == 2 || numberOfSixes== 2) {
        fullHouse += 1;
      }
      break;
      case(4):
      fourOfAKinds += 5 * 4;
      break;
      case(5):
      yahtzee += 1;
      break;
    }

    switch (numberOfSixes) {
      case(3):
      threeOfAKinds += 6 * 3;
      if (numberOfOnes == 2 || numberOfTwos == 2 || numberOfThrees == 2 || numberOfFours == 2 || numberOfFives == 2) {
        fullHouse += 1;
      }
      break;
      case(4):
      fourOfAKinds += 6 * 4;
      break;
      case(5):
      yahtzee += 1;
      break;
    }
      //check for small straight
    if (numberOfOnes > 0 && numberOfTwos > 0 && numberOfThrees > 0 && numberOfFours > 0) {
      smStraight += 30;
    } else if (numberOfTwos > 0 && numberOfThrees > 0 && numberOfFours > 0 && numberOfFives > 0) {
      smStraight += 30;
    } else if (numberOfThrees > 0 && numberOfFours > 0 && numberOfFives > 0 && numberOfSixes > 0) {
      smStraight += 30;
    }
// check for large straight
    if (numberOfOnes > 0) {
      if (numberOfTwos > 0) {
        if (numberOfThrees > 0) {
          if (numberOfFours > 0) {
            if (numberOfFives > 0) {
              lgStraight += 1;
            }
          }
        }
      }
    }

    if (numberOfTwos > 0) {
      if (numberOfThrees > 0) {
        if (numberOfFours > 0) {
          if (numberOfFives > 0) {
            if (numberOfSixes > 0) {
              lgStraight += 1;
            }
          }
        }
      }
    }
    
    chance = upperInitialTotal * 1;
      //total the lower section and grand total
    int lowerSectionTotal = threeOfAKinds + fourOfAKinds + (fullHouse * 25) + (smStraight * 30) + (lgStraight * 30) 
      + (yahtzee * 50) + chance;

    int grandTotal = upperInitialWithBonus + lowerSectionTotal;

    //print output totals
    System.out.println("You rolled: " +diceOne + " " + diceTwo + " " + diceThree + " " + diceFour + " " + diceFive);
    System.out.println("Upper section initial total: " + upperInitialTotal);
    System.out.println("Upper section total with bonus: " + upperInitialWithBonus);
    System.out.println("Lower section total: " + lowerSectionTotal);
    System.out.println("Grand Total: " + grandTotal);
    }
  }
}